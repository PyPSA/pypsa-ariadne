# SPDX-FileCopyrightText: : 2017-2023 The PyPSA-Eur Authors
#
# SPDX-License-Identifier: MIT

configfile: "workflow/submodules/pypsa-eur/config/config.default.yaml"
configfile: "config/config.yaml"
configfile: "config/config.personal.yaml"

run = config.get("run", {})
RDIR = run["name"] + "/" if run.get("name") else ""
RESOURCES = "resources/" + RDIR if not run.get("shared_resources") else "resources/"
RESULTS = "results/" + RDIR




module pypsaeur:
    snakefile:
        "submodules/pypsa-eur/Snakefile"
    config:
        config


use rule * from pypsaeur


from pathlib import Path

data_dir = Path("workflow/submodules/pypsa-eur/data")
rule get_data:
    output:
        [
            str(Path("data") / p.relative_to(data_dir))
            for p in data_dir.rglob("*")
            if p.is_file()
        ],
    shell:
        """
        mkdir -p data
        cp -nR {data_dir}/. data/
        """


rule clean:
    message: "Remove all build results but keep downloaded data."
    run:
         import shutil

         shutil.rmtree("resources")
         shutil.rmtree("results")
         print("Data downloaded to data/ has not been cleaned.")


rule retrieve_ariadne_scenario_data:
    params:
        iiasa=config["iiasa_database"]
    output:
        data="resources/ariadne_scenario_data.csv"
    log:
        "logs/retrieve_ariadne_scenario_data.log"
    resources:
        mem_mb=1000
    script:
        "scripts/retrieve_ariadne_scenario_data.py"

if config["enable"]["retrieve"] and config["enable"].get("retrieve_cost_data", True):

    use rule retrieve_cost_data from pypsaeur with:
        output:
            "data/costs_{year}-original.csv",

rule modify_cost_data:
    input:
        costs="data/costs_{year}-original.csv",
	modifications="ariadne-data/costs_{year}-modifications.csv",
    output:
       "data/costs_{year}.csv",
    resources:
        mem_mb=1000
    script:
        "scripts/modify_cost_data.py"


use rule solve_sector_network_myopic from pypsaeur with:
    params:
        **rules.solve_sector_network_myopic.params,
        additional_functionality=workflow.source_path("scripts/additional_functionality.py"),
