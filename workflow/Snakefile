# SPDX-FileCopyrightText: : 2017-2023 The PyPSA-Eur Authors
#
# SPDX-License-Identifier: MIT

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
import yaml, sys

sys.path.append("workflow/submodules/pypsa-eur/scripts")

from _helpers import path_provider

HTTP = HTTPRemoteProvider()

configfile: "workflow/submodules/pypsa-eur/config/config.default.yaml"
configfile: "config/config.yaml"
configfile: "config/config.personal.yaml"

run = config["run"]
scenarios = run.get("scenarios", {})
if run["name"] and scenarios.get("enable"):
    fn = Path(scenarios["file"])
    scenarios = yaml.safe_load(fn.read_text())
    RDIR = "{run}/"
    if run["name"] == "all":
        config["run"]["name"] = list(scenarios.keys())
elif run["name"]:
    RDIR = run["name"] + "/"
else:
    RDIR = ""

logs = path_provider("logs/", RDIR, run["shared_resources"])
benchmarks = path_provider("benchmarks/", RDIR, run["shared_resources"])
resources = path_provider("resources/", RDIR, run["shared_resources"])

RESULTS = "results/" + RDIR

envvars:
    "IIASA_USERNAME",
    "IIASA_PASSWORD"

wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+(m|c)?|all",
    ll="(v|c)([0-9\.]+|opt)",
    opts="[-+a-zA-Z0-9\.]*",
    sector_opts="[-+a-zA-Z0-9\.\s]*",
    planning_horizons="[0-9]*",
    year="[0-9]*",

module pypsaeur:
    snakefile:
        "submodules/pypsa-eur/Snakefile"
    config:
        config


use rule * from pypsaeur


from pathlib import Path

data_dir = Path("workflow/submodules/pypsa-eur/data")
rule get_data:
    output:
        [
            str(Path("data") / p.relative_to(data_dir))
            for p in data_dir.rglob("*")
            if p.is_file()
        ],
    shell:
        """
        mkdir -p data
        cp -nR {data_dir}/. data/
        """


rule clean:
    message: "Remove all build results but keep downloaded data."
    run:
         import shutil

         shutil.rmtree("resources")
         shutil.rmtree("results")
         print("Data downloaded to data/ has not been cleaned.")


rule retrieve_ariadne_scenario_data:
    params:
        iiasa_usr=os.environ["IIASA_USERNAME"],
        iiasa_pwd=os.environ["IIASA_PASSWORD"]
    output:
        data=resources("ariadne_scenario_data.csv")
    log:
        "logs/retrieve_ariadne_scenario_data.log"
    resources:
        mem_mb=1000
    script:
        "scripts/retrieve_ariadne_scenario_data.py"

#if config["enable"]["retrieve"] and config["enable"].get("retrieve_cost_data", True):
#
#    use rule retrieve_cost_data from pypsaeur with:
#        output:
#            resources("costs_{year}-original.csv"),

use rule prepare_sector_network from pypsaeur with:
    input:
        **{k: v for k, v in rules.prepare_sector_network.input.items() if k != "costs"},
	costs=resources("modified-costs_{planning_horizons}.csv"),

rule modify_cost_data:
    input:
        costs=resources("costs_{planning_horizons}.csv"),
        modifications="ariadne-data/costs_{planning_horizons}-modifications.csv",
    output:
        resources("modified-costs_{planning_horizons}.csv"),
    resources:
        mem_mb=1000
    script:
        "scripts/modify_cost_data.py"


rule modify_prenetwork:
    params:
        enable_kernnetz=config["wasserstoff_kernnetz"]["enable"],
        costs=config["costs"],
        max_hours=config["electricity"]["max_hours"],
    input:
        network=RESULTS
        + "prenetworks-brownfield/elec_s{simpl}_{clusters}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc",
        wkn="resources/wasserstoff_kernnetz_elec_s{simpl}_{clusters}.csv",
	costs=resources("modified-costs_{planning_horizons}.csv"),
    output:
        network=RESULTS
        + "prenetworks-final/elec_s{simpl}_{clusters}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc"
    resources:
        mem_mb=1000
    script:
        "scripts/modify_prenetwork.py"


use rule solve_sector_network_myopic from pypsaeur with:
    params:
        **{k: v for k, v in rules.solve_sector_network_myopic.params.items() if k != "custom_extra_functionality"},
        custom_extra_functionality=os.path.join(os.path.dirname(workflow.snakefile), "scripts/additional_functionality.py"),
    input:
        **{k: v for k, v in rules.solve_sector_network_myopic.input.items() if k != "network"},
        network=RESULTS
        + "prenetworks-final/elec_s{simpl}_{clusters}_l{ll}_{opts}_{sector_opts}_{planning_horizons}.nc",
        co2_totals_name=resources("co2_totals.csv"),


rule modify_existing_heating:
    input:
        ariadne=resources("ariadne_scenario_data.csv"),
        existing_heating="data/existing_infrastructure/existing_heating_raw.csv",
    output:
        existing_heating=resources("existing_heating.csv"),
    resources:
        mem_mb=1000
    script:
        "scripts/modify_existing_heating.py"



use rule build_existing_heating_distribution from pypsaeur with:
    input:
        **{k: v for k, v in rules.build_existing_heating_distribution.input.items() if k != "existing_heating"},
        existing_heating=resources("existing_heating.csv"),



rule modify_energy_totals:
    input:
        ariadne=resources("ariadne_scenario_data.csv"),
        energy_totals=resources("energy_totals.csv"),
    output:
        energy_totals=resources("energy_totals-modified.csv"),
    resources:
        mem_mb=1000
    script:
        "scripts/modify_energy_totals.py"


use rule build_population_weighted_energy_totals from pypsaeur with:
    input:
        **{k: v for k, v in rules.build_population_weighted_energy_totals.input.items() if k != "energy_totals"},
        energy_totals=resources("energy_totals-modified.csv"),

if config["wasserstoff_kernnetz"]["enable"]:

    rule build_wasserstoff_kernnetz:
        input:
            wasserstoff_kernnetz_1=HTTP.remote(
                "https://fnb-gas.de/wp-content/uploads/2023/11/2023_11_15_Anlage2_Leitungsmeldungen_weiterer_potenzieller_Wasserstoffnetzbetreiber_Veroeffentlichung_final.xlsx",
                keep_local=True,
                static=True,
            ),
            wasserstoff_kernnetz_2=HTTP.remote(
                "https://fnb-gas.de/wp-content/uploads/2023/11/2023_11_15_Anlage3_FNB_Massnahmenliste_Veroeffentlichung_final.xlsx",
                keep_local=True,
                static=True,
            ),
            gadm=HTTP.remote(
                "https://geodata.ucdavis.edu/gadm/gadm4.1/json/gadm41_DEU_1.json.zip",
                keep_local=True,
                static=True
            ),
            locations="ariadne-data/wasserstoff_kernnetz/locations_wasserstoff_kernnetz.csv",
        output:
            cleaned_wasserstoff_kernnetz="resources/wasserstoff_kernnetz.csv",
        script:
            "scripts/build_wasserstoff_kernnetz.py"


    rule cluster_wasserstoff_kernnetz:
        input:
            cleaned_h2_network="resources/wasserstoff_kernnetz.csv",
            regions_onshore="resources/regions_onshore_elec_s{simpl}_{clusters}.geojson",
            regions_offshore="resources/regions_offshore_elec_s{simpl}_{clusters}.geojson",
        output:
            clustered_h2_network="resources/wasserstoff_kernnetz_elec_s{simpl}_{clusters}.csv",
        script:
            "scripts/cluster_wasserstoff_kernnetz.py"
